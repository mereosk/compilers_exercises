/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            IF, ELSE, PREFIX, REVERSE, COMMA, RBRAC, CONCAT, LPAREN, RPAREN, LBRAC;
terminal String     STRING_LITERAL, IDENTIFIER;

/*  Non terminals */
non terminal            program, expr, func_declar, func_call;
// non terminal String    expr, expr_list;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
// precedence left PLUS, MINUS;
// precedence left TIMES;

/**
 *  The Grammar Rules
 */

program ::=  func_declar:r1 func_call:r2    {:
                                            System.out.println("public class Main {");
                                            System.out.println("\tpublic static void main(String[] args) {");
                                            System.out.printf("%s", r2);
                                            System.out.println("\t}");
                                            System.out.printf("%s", r1);
                                            System.out.println("}");
                                            :}

          ;

func_declar ::= IDENTIFIER LPAREN args RPAREN LBRAC
              |
              ;

args ::= args COMMA IDENTIFIER
        | IDENTIFIER
        |
        ;
    
func_call ::= IDENTIFIER LPAREN 

expr    ::= IF ELSE PREFIX REVERSE COMMA RBRAC CONCAT LPAREN RPAREN LBRAC STRING_LITERAL IDENTIFIER
          |
          ;
// program ::= expr_list:e {:
//             System.out.println("import java.lang.Math;\n");
//             System.out.println("public class Main {");
//             System.out.println("\tpublic static void main(String[] args) {");
//             System.out.printf("%s", e);
//             System.out.println("\t}");
//             System.out.println("}");
//             :}
//     ;
// expr_list ::= expr_list:rest expr:e SEMI PREFIX    {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", rest, e);         :}
//             |                               {: RESULT = "";         :}
//             ;
// expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = String.format("%s + %s", e1,e2);               :}
//              | expr:e1 MINUS expr:e2        {: RESULT = String.format("%s - %s", e1,e2);                :}
//              | expr:e1 TIMES expr:e2        {: RESULT = String.format("(int)Math.pow(%s, %s)", e1,e2);                :}
//              | LPAREN expr:e RPAREN	        {: RESULT = String.format("(%s)", e);                    :}
//              | NUMBER:n                     {: RESULT = String.format("%d", n);                               :}
//              | STRING_LITERAL:s	            {: RESULT = String.format("Integer.parseInt(\"%s\", 16)", s);  :}
//              | IF ELSE PREFIX REVERSE COMMA RBRAC IDENTIFIER
//              ;
